{"version":3,"sources":["components/Input/Input.js","components/Result/Result.js","components/Screen/Screen.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","state","inputValue","changeInputValueState","bind","convertToBinary","defineConverter","prevProps","this","typeConverter","setState","evt","regExp","RegExp","test","target","value","str","substr","length","alert","convertToDecimal","convertedNumber","parseInt","toString","style","display","height","backgroundColor","alignItems","padding","margin","width","min","onChange","type","onClick","React","Component","Result","result","Screen","optionConverter","setConvertedNumber","setOptionConverter","converted","justifyItems","autoFocus","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d339101.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Input.css\";\nimport propTypes from \"prop-types\";\n\n/**\n * Component input\n * @class Input\n * @constructor\n */\nclass Input extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tinputValue: 0\n\t\t};\n\n\t\t// Bind functions\n\t\tthis.changeInputValueState = this.changeInputValueState.bind(this);\n\t\tthis.convertToBinary = this.convertToBinary.bind(this);\n\t\tthis.defineConverter = this.defineConverter.bind(this);\n\t}\n\n\t/**\n\t * Metodo invocado imediatamente após alguma atualização ocorrer\n\t * @method componentDidUpdate\n\t * @param {Object} prevProps objeto props antigo\n\t * @return\n\t */\n\tcomponentDidUpdate(prevProps) {\n\t\tif (this.props.typeConverter != prevProps.typeConverter) {\n\t\t\tthis.setState({\n\t\t\t\tinputValue: 0\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Metodo para atualizar state inputValue com o valor digitado\n\t * @method changeInputValueState\n\t * @param {Object} evt objeto evento\n\t * @return\n\t */\n\tchangeInputValueState(evt) {\n\t\tvar regExp = new RegExp(\"[^0-1]\", \"g\");\n\t\tif (this.props.typeConverter === \"binToDec\") {\n\t\t\tif (regExp.test(evt.target.value)) {\n\t\t\t\tvar str = evt.target.value.substr(\n\t\t\t\t\t0,\n\t\t\t\t\tevt.target.value.length - 1\n\t\t\t\t);\n\t\t\t\talert(\"Digite apenas números binários\");\n\t\t\t\tthis.setState({\n\t\t\t\t\tinputValue: str\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\tinputValue: evt.target.value\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tinputValue: evt.target.value\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Metodo para definir qual tipo converter\n\t * @method defineConverter\n\t * @return\n\t */\n\tdefineConverter() {\n\t\tif (this.props.typeConverter === \"binToDec\") {\n\t\t\tthis.convertToBinary();\n\t\t} else {\n\t\t\tthis.convertToDecimal();\n\t\t}\n\t}\n\n\t/**\n\t * Metodo para converter o número binário inputado para decimal\n\t * @method convertToDecimal\n\t * @return\n\t */\n\tconvertToDecimal() {\n\t\tlet convertedNumber = parseInt(this.state.inputValue, 10).toString(2);\n\t\tthis.props.convertedNumber(convertedNumber);\n\t}\n\n\t/**\n\t * Metodo para converter o número decimal inputado para binario\n\t * @method convertToBinary\n\t * @return\n\t */\n\tconvertToBinary() {\n\t\tlet convertedNumber = parseInt(this.state.inputValue, 2).toString();\n\t\tthis.props.convertedNumber(convertedNumber);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"inline-flex\",\n\t\t\t\t\theight: \"100px\",\n\t\t\t\t\tbackgroundColor: \"#1db3ac\",\n\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\tpadding: \"0 10px\",\n\t\t\t\t\tmargin: \"30px 0\",\n\t\t\t\t\twidth: \"30%\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<span>Digite o número a ser convertido: </span>\n\t\t\t\t<div style={{ margin: \"0 10px\" }}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\tonChange={this.changeInputValueState}\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tvalue={this.state.inputValue}\n\t\t\t\t\t></input>\n\t\t\t\t</div>\n\t\t\t\t<div style={{ margin: \"0 10px\" }}>\n\t\t\t\t\t<button onClick={this.defineConverter}>Converter</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nInput.propTypes = {\n\tconvertedNumber: propTypes.func.isRequired,\n\ttypeConverter: propTypes.string.isRequired\n};\n\nexport default Input;\n","import React from \"react\";\nimport \"./Result.css\";\nimport propTypes from \"prop-types\";\n\n/**\n * Result component class\n * @class Result\n * @constructor\n */\nclass Result extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"inline-flex\",\n\t\t\t\t\theight: \"100px\",\n\t\t\t\t\tbackgroundColor: \"#92e8a9\",\n\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\tpadding: \"0 10px\",\n\t\t\t\t\tmargin: \"30px 0\",\n\t\t\t\t\twidth: \"30%\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<span>{this.props.result}</span>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nResult.propTypes = {\n\tresult: propTypes.oneOfType([propTypes.string, propTypes.number]).isRequired\n};\n\nexport default Result;\n","import React from \"react\";\nimport \"./Screen.css\";\nimport propTypes from \"prop-types\";\n\nimport Input from \"../Input/Input\";\nimport Result from \"../Result/Result\";\n/**\n * This is the component screen\n * @class Screen\n * @constructor\n */\nclass Screen extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tconvertedNumber: 0,\n\t\t\toptionConverter: \"\"\n\t\t};\n\n\t\t// bind functions\n\t\tthis.setConvertedNumber = this.setConvertedNumber.bind(this);\n\t\tthis.setOptionConverter = this.setOptionConverter.bind(this);\n\t}\n\n\t/**\n\t * Metodo para setar estado convertedNumber com resultado que vem do componente input\n\t * @method setConvertedNumber\n\t */\n\tsetConvertedNumber(converted) {\n\t\tthis.setState({\n\t\t\tconvertedNumber: converted\n\t\t});\n\t}\n\n\t/**\n\t * Metodo para setar estado optionConverter\n\t * @method setOptionConverter\n\t * @param {Object} evt objeto evento\n\t * @return\n\t */\n\tsetOptionConverter(evt) {\n\t\tthis.setState({\n\t\t\toptionConverter: evt.target.value\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tmargin: \"10px\",\n\t\t\t\t\tdisplay: \"grid\",\n\t\t\t\t\tjustifyItems: \"center\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<h1>\n\t\t\t\t\tConvertedor de decimal para binário/binário para decimal\n\t\t\t\t</h1>\n\t\t\t\t<div>\n\t\t\t\t\t<span>Selecione o modo de conversão</span>\n\t\t\t\t\t<select autoFocus={true} onChange={this.setOptionConverter}>\n\t\t\t\t\t\t<option value=\"decToBin\">Decimal para Binário</option>\n\t\t\t\t\t\t<option value=\"binToDec\">Binário para Decimal</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<Input\n\t\t\t\t\tconvertedNumber={this.setConvertedNumber}\n\t\t\t\t\ttypeConverter={this.state.optionConverter}\n\t\t\t\t></Input>\n\t\t\t\t<Result result={this.state.convertedNumber}></Result>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nScreen.propTypes = {};\n\nexport default Screen;\n","import React from \"react\";\nimport \"./App.css\";\nimport propTypes from \"prop-types\";\n\nimport Screen from \"./components/Screen/Screen\";\n\n/**\n * App class\n * @class App\n * @constructor\n */\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Screen></Screen>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nApp.propTypes = {};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}